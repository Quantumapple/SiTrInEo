                          INTRODUCTION

This code is a Geant4 based simulation mainly for test-beam configurations. 
The code can also simulate radioactive source data at the lab. 
The code uses as inputs the same config file used for the TAF analysis with 
some slight modifications with some additional parameters to set the 
simulation. Out of this configuration file the code builds the geometry 
and particles to be simulated.

The code uses the same file parser as in TAF to decode the config files 
and build the setup. The world volume is a box which size is such that to 
contain all the planes defined in the config file. The material of the world 
volume is defined as G4_Air material.

                       GEOMETRY CONSTRUCTION

The planes parameters are used to build the sensitive volumes:
 - Pitch on U and V as well as the number of columns and lines are used to 
   define the dimensions. The sensitive volume is a box.
 - PlaneThickness and PlaneMaterial variables are also used.
   * Some additional variables, PlaneMetalThickness and PlaneEpiThickness,
     expressed as a fraction of the sensor total thickness, are used to build a 
     sensor with a metalization, epitaxial and substrate.
   * The epi-layer variable is the sensitive volume, the others are just material.
   * If these variables are specified then the epi-layer is considered to be the 
     total sensor thickness with zero metalization and substrate.
 - The sensitive plane is placed in space (global position and rotation) as 
   is specified in the config file.
 - If the parameter of the plane Readout is higher than zero, then the plane 
   is considered sensitive. It it is not it is considered non-sensitive.
   This is a way to implement non-sensitive materials like non-read sensors, coverings ...

                         EXPERIMENTAL SETUPS
   
Currently only two experimental setups is implemented, beam-test and radioactive source:
  - beam-test
    * See the config/runXXX.cfg.Beam_Test_example file as a template
  - radioactive sources (currently only Sr90 and Fe55)
    * See the config/runXXX.cfg.Source_Sr90_example file as a template
  - It is expected in the near future to implement an experimental set-up 
    either fixed target or collider.
    * Both of these will need to implement a particle generator from some interaction point
    * Imclude beam-induced particles with amounts compatibles with the sensors readout speeds.
    
                   CHARGE TRANSPORT AND DIGITIZATION
                   
If specified, the code "digitizes" the sensor's hits. It is done individually for each plane, depending 
if the digitization model variable PlaneDigitization (a string) is specified. The code uses external 
libraries of a code called MIMOSA_DIGITIZER to perform the charge transport and digitization. Along with the 
digitization model variables, some other variables need to be specified for each plane in order to the 
digitization to be performed,

  - Analog output sensors:
    For this kind of sensors need to specify the following variables
    PlaneDigitizeNoise:   14.0               // Noise in electrons
    PlaneDigitizeCalib:   1                  // Calibration factor: from elec => ADC units
    PlaneDigitizeADCbits: 12                 // number of ADC bits
    PlaneDigitizeADCMin:  0.0                // Lower level of ADC range, in volts
    PlaneDigitizeADCMax:  1.0                // Upper level of ADC range, in volts

  - Digital ouput sensors:
    For this kind of sensors need to specify the following variables
    
    PlaneDigitizeOcc:     1.0e-7             // average noise occupancy, only in case of digital output sensors
    PlaneDigitizeNoise:   14.0               // Noise in electrons
    PlaneDigitizeThre:    10.0               // Threhold, mainly in case of digital output sensors
    
    The kind of output of the sensor, either analog or digitial, is decided by the plane variable AnalysisMode,
    which is 2 or 3 for analog or digitial ouput sensors, respectively.
    
                   INCLUDING NON-SENSITVE SIM-HITS INFORMATION
                   
The code allows to save in disk the interactions of the particles with the non-sensitive materials. This could be 
helpful to understand things by performing event displays at during the analysis in TAF. In order store this information 
Just need to set the variable FillNonSensitiveBranch: in the tracker block to 1. By defult this information if not saved 
in the output root file.


================================
 Getting the digitization code:
--------------------------------

Fist than all, you will need to modify the Settings.sh file by setting the right path to the MIMOSA_DIGITIZER code,
the DIGI_DIR variable. This code will perform the charge transport and digitization of the simulated hits on the sensors.
To get the trunk of this code just do,

>$ svn co https://sbgsvn.in2p3.fr/svn/CMOS/MIMOSA_DIGITIZER/trunk  MIMOSA_DIGITIZER

go to this directory and compile by doing

>$ ./Compile.sh

The system should responds with something like this,

rm -f src/*~
rm -f *~
rm -f ./lib/*.o
g++ -I./ -I./lib/ -g -Wall -fPIC -Wno-deprecated -pthread -m64 -I/home/aperez/root/include -c -I. -o ./lib/digit_b2.o src/digit_b2.cc

You can check that the .o library has been created inside the lib file.

You will then need to set the DIGI_DIR variable in the Settings.sh file to the actual path of the MIMOSA_DIGITIZER code.

======================================
 Specifying te Gant4 Build localtion:
--------------------------------------

The code also needs the location of the Geant4 builds. For this you will need to set the variable GEANT4_BUILD_DIR inside the 
Settings.sh file, e.g. GEANT4_BUILD_DIR=/path/Geant4/geantX.YY.ZZ.pWW-build.

=====================
 Compiling the code:
----------------------
    
Once the DIGI_DIR and GEANT4_BUILD_DIR varibles are set inside the Settings.sh file, just execute it

>$ ./Settings.sh
    
Now you're ready to compile. Just do,

>$ make clean
>$ make

There will be alot of warnings, just ignore them. This creates the executable "MimosaSimu".

The code can be ran in two ways: interctively and batch mode.

- Interative mode: just do 
>$ MimosaSimu config_file.cfg  interative
  * This will created a gui with which you can interact.
  * You can visualize the geometry.
  * You can shot particles by clicking on the green play buttom at the top right menu. This will simulate one event per click.
  * You can change the particle type and energy with the "GunParticle" and "GunEnergy" menu buttons. 
  * Can also set a magnetic field with the "Field" menu button.
  This running mode allows to perform quick checks of your geometry and beam particle setup.

- Batch mode: Just do 
>$ MimosaSimu config_file.cfg
  * The code will run all the events specified in the config file: "MCEvents" variable.
  * You can turn on the verbosity by setting the config file variable "SavePlots" to 1.

For either running mode there are two out files,
  config_file.cfg.gdml: file with gdml description of the geometry.
  config_file.cfg.root: root file with n-tuple containing all the information to the processed by TAF in a later stage.


You can play with the examples configuration files inside the config directy.

- Beam-test experimental setup:
MimosaSimu  config/runXXX.cfg.Beam_Test_example

- Radioactive experimental setup:
MimosaSimu  config/runXXX.cfg.Source_Sr90_example



  
